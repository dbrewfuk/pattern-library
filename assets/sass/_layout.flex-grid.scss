.grid,
%grid {
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: 0;
  padding: 0;
}

.grid-cell,
%grid-cell {
  flex: 1;
}

.grid--flex-cells {
  & > .grid-cell {
    display: flex;
  }
}

%grid--flex-cells {
  & > %grid-cell {
    display: flex;
  }
}

.grid--start,
%grid--start {
  justify-content: flex-start;
}

.grid--middle,
%grid--middle {
  justify-content: center;
}

.grid--between,
%grid--between {
  justify-content: space-between;
}

.grid--end,
%grid--end {
  justify-content: flex-end;
}

.grid--top,
%grid--top {
  align-items: flex-start;
}

.grid--content-top,
%grid--content-top {
  align-content: flex-start;
}

.grid--bottom,
%grid--bottom {
  align-items: flex-end;
}

.grid--center,
%grid--center {
  align-items: center;
}

.grid--center-all,
%grid--center-all {
  align-items: center;
  justify-content: center;
  align-content: center;
}

.grid-cell--top,
%grid-cell--top {
  align-self: flex-start;
}

.grid-cell--bottom,
%grid-cell--bottom {
  align-self: flex-end;
}

.grid-cell--center,
%grid-cell--center {
  align-self: center;
}


.grid-cell {
  &.u-1of2 {
    flex: 0 0 50%;
  }
  &.u-1of3 {
    flex: 0 0 33.3333%;
  }
  &.u-1of4 {
    flex: 0 0 25%;
  }
  &.u-full {
    flex: 0 0 100% !important;
  }
  &.u-3of4 {
    flex: 0 0 75%;
  }
  &.u-2of3 {
    flex: 0 0 66.6666%;
  }
  @include media(mobile){
    &.u-small-1of2 {
    flex: 0 0 50%;
  }
  &.u-small-1of3 {
    flex: 0 0 33.3333%;
  }
  &.u-small-1of4 {
    flex: 0 0 25%;
  }
  &.u-small-full {
    flex: 0 0 100% !important;
  }
  &.u-small-3of4 {
    flex: 0 0 75%;
  }
  &.u-small-2of3 {
    flex: 0 0 66.6666%;
  }

  }
  @include media(tablet){
    &.u-med-1of2 {
    flex: 0 0 50%;
  }
  &.u-med-1of3 {
    flex: 0 0 33.3333%;
  }
  &.u-med-1of4 {
    flex: 0 0 25%;
  }
  &.u-med-full {
    flex: 0 0 100% !important;
  }
  &.u-med-3of4 {
    flex: 0 0 75%;
  }
  &.u-med-2of3 {
    flex: 0 0 66.6666%;
  }

  }
  @include media(desktop){
    &.u-large-1of2 {
    flex: 0 0 50%;
  }
  &.u-large-1of3 {
    flex: 0 0 33.3333%;
  }
  &.u-large-1of4 {
    flex: 0 0 25%;
  }
  &.u-large-full {
    flex: 0 0 100% !important;
  }
  &.u-large-3of4 {
    flex: 0 0 75%;
  }
  &.u-large-2of3 {
    flex: 0 0 66.6666%;
  }

  }
  @include media(big-desktop){
    &.u-xlarge-1of2 {
    flex: 0 0 50%;
  }
  &.u-xlarge-1of3 {
    flex: 0 0 33.3333%;
  }
  &.u-xlarge-1of4 {
    flex: 0 0 25%;
  }
  &.u-xlarge-full {
    flex: 0 0 100% !important;
  }
  &.u-xlarge-3of4 {
    flex: 0 0 75%;
  }
  &.u-xlarge-2of3 {
    flex: 0 0 66.6666%;
  }

  }
}


@mixin grid-sizing($name: "") {
  $sep: "-";
  @if $name == "" {
    $sep: "";
  }
  .#{$name}#{$sep}grid--auto > .grid-cell {
    flex: 0 1 auto;
  }
  %#{$name}#{$sep}grid--auto > %grid-cell {
    flex: 0 1 auto;
  }
  .#{$name}#{$sep}grid--fit > .grid-cell {
    flex: 1;
  }
  %#{$name}#{$sep}grid--fit > %grid-cell {
    flex: 1;
  }
  .#{$name}#{$sep}grid--full > .grid-cell {
    flex: 0 0 100%;
  }
  %#{$name}#{$sep}grid--full > %grid-cell {
    flex: 0 0 100%;
  }
  .#{$name}#{$sep}grid--1of2 > .grid-cell {
    flex: 0 0 50%;
  }
  %#{$name}#{$sep}grid--1of2 > %grid-cell {
    flex: 0 0 50%;
  }
  .#{$name}#{$sep}grid--1of3 > .grid-cell {
    flex: 0 0 33.3333%;
  }
  %#{$name}#{$sep}grid--1of3 > %grid-cell {
    flex: 0 0 33.3333%;
  }
  .#{$name}#{$sep}grid--1of4 > .grid-cell {
    flex: 0 0 25%;
  }
  %#{$name}#{$sep}grid--1of4 > %grid-cell {
    flex: 0 0 25%;
  }
  .#{$name}#{$sep}grid--1of5 > .grid-cell {
    flex: 0 0 20%;
  }
  %#{$name}#{$sep}grid--1of5 > %grid-cell {
    flex: 0 0 20%;
  }
}

// create the default grid-sizing modifiers
@include grid-sizing();

// create grid-sizing modifiers for each breakpoint
@each $breakpoint in $breakpoints {
  $name: nth($breakpoint, 2);
  @include breakpoint($name) {
    @include grid-sizing($name);
  }
}



@mixin grid-placement($name: "") {
  $sep: "-";
  @if $name == "" {
    $sep: "";
  }

  .#{$name}#{$sep}grid--end {
    justify-content: flex-end;
  }
  %#{$name}#{$sep}grid--end {
    justify-content: flex-end;
  }

  .#{$name}#{$sep}grid--center {
    align-items: center;
  }
  %#{$name}#{$sep}grid--center {
    align-items: center;
  }

  .#{$name}#{$sep}grid--start {
    justify-content: flex-start;
  }
  %#{$name}#{$sep}grid--start {
    justify-content: flex-start;
  }
}

// create the default grid-sizing modifiers
@include grid-placement();

// create grid-sizing modifiers for each breakpoint
@each $breakpoint in $breakpoints {
  $name: nth($breakpoint, 2);
  @include breakpoint($name) {
    @include grid-placement($name);
  }
}



@mixin grid-gutters($name: "") {
  $sep: "-";
  @if $name == "" {
    $sep: "";
  }
  .#{$name}#{$sep}grid--gutters-none {
    margin-left: 0;
    & > .grid-cell {
      padding-left: 0;
    }
  }
  %#{$name}#{$sep}grid--gutters-none {
    margin-left: 0;
    & > %grid-cell {
      padding-left: 0;
    }
  }
  .#{$name}#{$sep}grid--gutters-small {
    margin-left: -1 * $margin--small;
    margin-top: -1 * $margin--small;
    
    & > .grid-cell {
      padding-top: $padding--small;
      padding-left: $padding--small;
      margin-bottom: $margin--small;
    }
  }
  %#{$name}#{$sep}grid--gutters-small {
    margin-left: -1 * $margin--small;
    margin-top: -1 * $margin--small;
    
    & > %grid-cell {
      padding-top: $padding--small;
      padding-left: $padding--small;
      margin-bottom: $margin--small;
    }
  }
  
  .#{$name}#{$sep}grid--gutters {
    margin-left: -1 * $margin;
    margin-top: -1 * $margin;
    
    & > .grid-cell {
      padding-top: $padding;
      padding-left: $padding;
      margin-bottom: $margin;
    }
  }
  %#{$name}#{$sep}grid--gutters {
    margin-left: -1 * $margin;
    margin-top: -1 * $margin;
    
    & > %grid-cell {
      padding-top: $padding;
      padding-left: $padding;
      margin-bottom: $margin;
    }
  }

  .#{$name}#{$sep}grid--gutters-large {
    margin-left: -1 * $margin--large;
    margin-top: -1 * $margin--large;
    
    & > .grid-cell {
      padding-top: $padding--large;
      padding-left: $padding--large;
      margin-bottom: $margin--large;
    }
  }
  %#{$name}#{$sep}grid--gutters-large {
    margin-left: -1 * $margin--large;
    margin-top: -1 * $margin--large;
    
    & > %grid-cell {
      padding-top: $padding--large;
      padding-left: $padding--large;
      margin-bottom: $margin--large;
    }
  }

  .#{$name}#{$sep}grid--gutters-xlarge {
    margin-left: -1 * $margin--xlarge;
    margin-top: -1 * $margin--xlarge;
    
    & > .grid-cell {
      padding-top: $padding--xlarge;
      padding-left: $padding--xlarge;
      margin-bottom: $margin--xlarge;
    }
  }
  %#{$name}#{$sep}grid--gutters-xlarge {
    margin-left: -1 * $margin--xlarge;
    margin-top: -1 * $margin--xlarge;
    
    & > %grid-cell {
      padding-top: $padding--xlarge;
      padding-left: $padding--xlarge;
      margin-bottom: $margin--xlarge;
    }
  }

  .#{$name}#{$sep}grid--gutters-xxlarge {
    margin-left: -1 * $margin--xxlarge;
    margin-top: -1 * $margin--xxlarge;
    
    & > .grid-cell {
      padding-top: $padding--xxlarge;
      padding-left: $padding--xxlarge;
      margin-bottom: $margin--xxlarge;
    }
  }
  %#{$name}#{$sep}grid--gutters-xxlarge {
    margin-left: -1 * $margin--xxlarge;
    margin-top: -1 * $margin--xxlarge;
    
    & > %grid-cell {
      padding-top: $padding--xxlarge;
      padding-left: $padding--xxlarge;
      margin-bottom: $margin--xxlarge;
    }
  }
}

// create the default grid-gutters modifiers
@include grid-gutters();

// create grid-gutters modifiers for each breakpoint
@each $breakpoint in $breakpoints {
  $name: nth($breakpoint, 2);
  @include breakpoint($name) {
    @include grid-gutters($name);
  }
} 

@mixin grid($name:"",$gutters:"",$selector:"") {
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: 0;
  padding: 0;
  @if $name == "" {
   > #{$selector} {
    flex: 1;
  }
}
  @if $name == "auto" {
   > #{$selector} {
    flex: 0 1 auto;
  }
}
  @if $name == "fit" {
   > #{$selector} {
    flex: 1;
  }
}
  @if $name == "full" {
   > #{$selector} {
    flex: 0 0 100%;
  }
}
  @if $name == "1of2" {
   > #{$selector} {
    flex: 0 0 50%;
  }
}
  @if $name == "1of3" {
   > #{$selector} {
    flex: 0 0 33.3333%;
  }
}
  @if $name == "1of4" {
   > #{$selector} {
    flex: 0 0 25%;
  }
}
@if $name == "1of5" {
   > #{$selector} {
    flex: 0 0 20%;
  }
}
@if $name == "1of6" {
   > #{$selector} {
    flex: 0 0 16.6666666667%;
  }
}

@if $gutters == "gutters" {
  @include gutters(gutters,$selector);
}
@if $gutters == "large" {
  @include gutters(large,$selector);
}
@if $gutters == "xlarge" {
  @include gutters(xlarge,$selector);
}
@if $gutters == "xxlarge" {
  @include gutters(xxlarge,$selector);
}
@if $gutters == "xxxlarge" {
  @include gutters(xxxlarge,$selector);
}



}

@mixin grid-cell($name:"") {
  @if $name == "" {
    flex: 1;
}
  @if $name == "auto" {
    flex: 0 1 auto !important;
}
  @if $name == "fit" {
    flex: 1;
}
  @if $name == "full" {
    flex: 0 0 100%;
}
  @if $name == "1of2" {
    flex: 0 0 50%;
}
  @if $name == "1of3" {
    flex: 0 0 33.3333% !important;
}
@if $name == "2of3" {
    flex: 0 0 66.6666%;
}
  @if $name == "1of4" {
    flex: 0 0 25% !important;
}
@if $name == "1of5" {
    flex: 0 0 20%;
}
@if $name == "1of6" {
    flex: 0 0 16.6666666667%;
}
}
@mixin gutter-spacing($space,$selector){
  margin: -#{$space} 0 #{$space} -#{$space};
   > #{$selector} {
    padding: #{$space} 0 0 #{$space};
}
}
@mixin gutters($size,$selector) {
  @if $size == "" {
    margin: -#{$margin} 0 $margin -#{$margin};
   > #{$selector} {
    padding: $padding 0 0 $padding;
  }
}
@if $size == "gutters" {;
  @include gutter-spacing($margin,$selector);
}
@if $size == "large" {;
  @include gutter-spacing($margin--large,$selector);
}
@if $size == "xlarge" {;
  @include gutter-spacing($margin--xlarge,$selector);
}
@if $size == "xxlarge" {;
  @include gutter-spacing($margin--xxlarge,$selector);
}
@if $size == "xxxlarge" {;
  @include gutter-spacing($margin--xxxlarge,$selector);
}
@if $size == "small" {
  @include gutter-spacing($margin--small,$selector);
}
@if $size == "tiny" {
  @include gutter-spacing($margin--tiny,$selector);
}
}









